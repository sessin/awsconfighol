[
{
	"uri": "/",
	"title": "AWS Config 실습",
	"tags": [],
	"description": "",
	"content": "본 실습 프로그램은 AWS Config 서비스를 이용하여 AWS 자원에 대한 구성 점검 및 구성 변경에 대한 이력을 확인하고 조직에서 정의한 규정을 준수 여부를 확인하는 방법을 익히는 것에 목표를 두고 있습니다.\n Report an issue \u0026amp; Learn more  "
},
{
	"uri": "/config/module1.html",
	"title": "AWS Config 활성화",
	"tags": [],
	"description": "",
	"content": " AWS Config 를 이용하여 AWS 자원에 대한 구성 변경 추적 및 규정 준수 여부에 대한 확인을 위해서는 먼저 AWS Config 가 활성화되어야 합니다. 아래의 절차에 따라 AWS Config 를 활성화하시기 바랍니다.\nAWS Config 활성화  AWS Config 를 활성화하기 위하여 AWS 메뉴 중 Config 서비스 메뉴로 이동합니다. AWS Config 가 활성화되어 있지 않은 경우 아래와 같이 AWS Config 화면 접속 시 \u0026ldquo;시작하기\u0026rdquo; 버튼이 있는 것을 확인할 수 있습니다. AWS Config 활성화를 위하여 \u0026ldquo;시작하기\u0026rdquo; 버튼을 클릭합니다.  AWS Config 설정 화면에서 아래와 같이 \u0026ldquo;모든 리소스\u0026rdquo; 항목에서 \u0026ldquo;전역 리소스\u0026rdquo; 를 체크하고 \u0026ldquo;버킷 이름\u0026rdquo; 에는 기본값으로 적용된 S3 버킷에 \u0026ldquo;awsconfighol\u0026rdquo; 을 프리픽스로 추가합니다. \u0026ldquo;Amazon SNS 주제\u0026rdquo; 항목에서는 \u0026ldquo;구성 변경 사항과 알림을 Amazon SNS 주제에 스트리밍합니다.\u0026rdquo; 를 선택합니다. 다른 설정은 기본값으로 두고 \u0026ldquo;다음\u0026rdquo; 버튼을 클릭합니다.  AWS Config 규칙 화면에서는 모두 기본값으로 두고 \u0026ldquo;다음\u0026rdquo; 버튼을 클릭합니다.  검토 화면에서 AWS Config 설정 사항을 확인한 후 \u0026ldquo;확인\u0026rdquo; 버튼을 클릭하여 AWS Config 를 활성화합니다.   "
},
{
	"uri": "/remediation/module1.html",
	"title": "SSM 문서 생성",
	"tags": [],
	"description": "",
	"content": " SSM Automation 등록 AWS Config 규칙에 사용될 문제 해결 작업은 AWS Systems Manager Automation을 사용하여 실행됩니다. 따라서, 여러분들은 AWS 에서 관리형으로 제공하는 AWS 소유의 Automation 을 사용하거나 여러분들이 직접 작성하신 Automation 을 이용하여 \u0026ldquo;문제 해결\u0026rdquo; 을 하실 수 있습니다. 이 과정에서는 EC2 인스턴스에 적용되어 있는 Security Group 의 0.0.0.0/0 Port 22 허용 정책을 탐지 후 제거하는 Automation 을 신규로 생성하도록 하겠습니다.\n1.문제해결에 사용할 SSM Document 를 위해 AWS Systems Manager Document 를 클릭한 뒤 \u0026ldquo;\u0026ldquo;Create Automation\u0026rdquo; 버튼을 클릭하여 아래이 순서대로 새로운 Automation 을 생성합니다.\n2.이름에 \u0026ldquo;DisablePublicSSH\u0026rdquo; 를 입력한 후 아래의 메뉴에서 \u0026ldquo;컨텐츠\u0026rdquo; 를 클릭합니다. 이후에 Automation 에 사용할 코드를 직접 입력하기 위하여 우측의 \u0026ldquo;Edit\u0026rdquo; 버튼을 클릭한 후 아래의 코드를 복사하여 붙여넣습니다. --- description: Disable SSH and RDP ports opened to IP address specified, or to all addresses if no address is specified. schemaVersion: \u0026quot;0.3\u0026quot; assumeRole: \u0026quot;{{ AutomationAssumeRole }}\u0026quot; parameters: GroupId: type: String description: (Required) Security Group ID allowedPattern: ^([s][g]\\-)([0-9a-f]){1,}$ IpAddressToBlock: type: String description: (Optional) Additional Ipv4 or Ipv6 address to block access from (ex:1.2.3.4/32) allowedPattern: (^$)|^((25[0-5]|(2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3})|(^((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)::((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?))|(^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))\\/(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)$ default: \u0026quot;\u0026quot; AutomationAssumeRole: type: String description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf. default: \u0026quot;\u0026quot; mainSteps: - name: CustomIpCheck action: aws:branch inputs: Choices: - NextStep: DisableFromCustomIpV6 And: - Not: Variable: \u0026quot;{{IpAddressToBlock}}\u0026quot; StringEquals: \u0026quot;\u0026quot; - Variable: \u0026quot;{{ IpAddressToBlock }}\u0026quot; Contains: \u0026quot;:\u0026quot; - NextStep: DisableFromCustomIpV4 And: - Not: Variable: \u0026quot;{{IpAddressToBlock}}\u0026quot; StringEquals: \u0026quot;\u0026quot; - Not: Variable: \u0026quot;{{ IpAddressToBlock }}\u0026quot; Contains: \u0026quot;:\u0026quot; Default: DisableFromAllIp - name: DisableFromAllIp action: aws:executeAwsApi inputs: Service: ec2 Api: RevokeSecurityGroupIngress GroupId: \u0026quot;{{GroupId}}\u0026quot; IpPermissions: [ {\u0026quot;IpProtocol\u0026quot;: \u0026quot;tcp\u0026quot;, \u0026quot;FromPort\u0026quot;: 22, \u0026quot;ToPort\u0026quot;: 22, \u0026quot;IpRanges\u0026quot;: [{\u0026quot;CidrIp\u0026quot;: \u0026quot;0.0.0.0/0\u0026quot;}]}, {\u0026quot;IpProtocol\u0026quot;: \u0026quot;tcp\u0026quot;, \u0026quot;FromPort\u0026quot;: 22, \u0026quot;ToPort\u0026quot;: 22, \u0026quot;Ipv6Ranges\u0026quot;: [{\u0026quot;CidrIpv6\u0026quot;: \u0026quot;::/0\u0026quot;}]} ] isEnd: true - name: DisableFromCustomIpV4 action: aws:executeAwsApi inputs: Service: ec2 Api: RevokeSecurityGroupIngress GroupId: \u0026quot;{{GroupId}}\u0026quot; IpPermissions: [ {\u0026quot;IpProtocol\u0026quot;: \u0026quot;tcp\u0026quot;, \u0026quot;FromPort\u0026quot;: 22, \u0026quot;ToPort\u0026quot;: 22, \u0026quot;IpRanges\u0026quot;: [{\u0026quot;CidrIp\u0026quot;: \u0026quot;{{ IpAddressToBlock }}\u0026quot;}]} ] isEnd: true - name: DisableFromCustomIpV6 action: aws:executeAwsApi inputs: Service: ec2 Api: RevokeSecurityGroupIngress GroupId: \u0026quot;{{GroupId}}\u0026quot; IpPermissions: [ {\u0026quot;IpProtocol\u0026quot;: \u0026quot;tcp\u0026quot;, \u0026quot;FromPort\u0026quot;: 22, \u0026quot;ToPort\u0026quot;: 22, \u0026quot;Ipv6Ranges\u0026quot;: [{\u0026quot;CidrIpv6\u0026quot;: \u0026quot;{{ IpAddressToBlock }}\u0026quot;}]} ] isEnd: true  3.화면 하단의 \u0026ldquo;Create Automation\u0026rdquo; 을 클릭하여 새로운 Automation 의 생성을 완료합니다. "
},
{
	"uri": "/overview/module1.html",
	"title": "사전 지식",
	"tags": [],
	"description": "",
	"content": " AWS Config AWS Config는 AWS 계정에 있는 AWS 리소스의 구성을 자세히 보여 줍니다. 이러한 보기에는 리소스 간에 어떤 관계가 있는지와 리소스가 과거에 어떻게 구성되었는지도 포함되므로, 시간이 지나면서 구성과 관계가 어떻게 변하는지 확인할 수 있습니다.\nAWS 리소스는 Amazon Elastic Compute Cloud(EC2) 인스턴스, Amazon Elastic Block Store(EBS) 볼륨, 보안 그룹 또는 Amazon Virtual Private Cloud(VPC)와 같이 AWS에서 사용할 수 있는 개체입니다. AWS Config에서 지원되는 AWS 리소스의 전체 목록은 AWS 공식문서의 AWS Config 지원 리소스 유형 및 리소스 관계 단원을 참조하십시오.\nAWS Config 에 대한 더 자세한 사항은 AWS Document 를 참고해주시기 바랍니다.\n AWS CloudFormation AWS CloudFormation은 Amazon Web Services 리소스를 모델링하고 설정하여 리소스 관리 시간을 줄이고 AWS에서 실행되는 애플리케이션에 더 많은 시간을 사용하도록 해 주는 서비스입니다. 필요한 모든 AWS 리소스(예: Amazon EC2 인스턴스 또는 Amazon RDS DB 인스턴스)를 설명하는 템플릿을 생성하면 AWS CloudFormation이 해당 리소스의 프로비저닝과 구성을 담당합니다. AWS 리소스를 개별적으로 생성하고 구성할 필요가 없으며 어떤 것이 무엇에 의존하는지 파악할 필요도 없습니다. AWS CloudFormation에서 모든 것을 처리합니다. 다음 시나리오는 AWS CloudFormation이 얼마나 유용한지를 보여줍니다.\n본 실습에서는 EC2 사용 환경을 구성하기 위해 CloudFormation 템플릿을 실행합니다.\nAWS CloudFormation에 대한 더 자세한 사항은 AWS Document 를 참고해주시기 바랍니다.\n "
},
{
	"uri": "/overview.html",
	"title": "실습 개요",
	"tags": [],
	"description": "",
	"content": " 본 실습에서는 EC2 인스턴스를 생성한 후 생성된 EC2 인스턴스의 상태를 변경하거나 적용되어 있는 Security Group 등의 설정을 변경한 후 이에 대한 추적 및 감시 기능이 AWS Config 를 통해 제공되는지 익혀봅니다. 실습은 약 1시간에서 1시간 반 정도 소요되며 크게 4개의 모듈로 진행됩니다.\n모듈 1. 실습 환경구성 : VPC 환경 및 EC2 인스턴스를 AWS CloudFormation 을 통해 구축합니다. 모듈 2. AWS Config 를 이용한 규정 준수 확인 : AWS Confi Rule 생성 모듈 3. 문제 해결 : AWS Config 에서 제공하는 \u0026ldquo;문제 해결\u0026rdquo; 기능을 확인합니다. 모듈 4. 실습 구성 요소 삭제 : 생성했던 환경 자원들을 삭제합니다.  Report an issue \u0026amp; Learn more  "
},
{
	"uri": "/pre.html",
	"title": "실습 환경 구성",
	"tags": [],
	"description": "",
	"content": " 이 과정에서는 AWS Config 에서 제공하는 AWS 자원에 대한 변경 이력 추적 기능과 각 자원에 대한 Config Rules 를 이용한 규정 준수 여부를 확인하는 기능에 대해 실습을 하게 됩니다.  "
},
{
	"uri": "/pre/module1.html",
	"title": "EC2 인스턴스 설치",
	"tags": [],
	"description": "",
	"content": " EC2 인스턴스 환경 구성 이번 모듈에서는 위협 요인이 내재된 환경을 구성하기 위해 CloudFormation을 실행합니다. CloudFormation을 통해 다음과 같은 AWS 리소스가 생성됩니다.\n   AWS 서비스 유형 리소스명 기타     EC2 인스턴스 WebServerInstance t2.micro   VPC VPC 10.10.0.0/16   VPC Subnet PublicSubnet 10.10.0.0/18   VPC Subnet PrivateSubnet 10.10.64.0/18    |기타 서비스| Elastic IP, Route table, Security Groups, Network ACL, IAM Role 등|\n AWS 리전 확인\na. 이번 실습은 AWS 서울 (ap-northeast-2) 리전에서 수행됩니다.\nb. AWS 관리 콘솔로 접속해서, 아래의 화면과 같이 AWS 서울 리전이 선택되었는지 확인합니다.  Open AWS Console    본 실습의 모든 과정은 서울 리전에서 이루어집니다. 원활한 실습 진행을 위해서 반드시 서울 리전이 선택되었는지를 확인하시기 바랍니다.\n  EC2 키페어 생성 (이미 생성된 경우 이 단계 생략)\na. EC2 키페어는 EC2인스턴스 생성을 위해 필요한 항목이므로, CloudFormation 템플릿을 실행하기에 앞서 EC2 키페어를 생성합니다.\nb. 이미 EC2 키페어가 생성된 경우라면, 이 단계를 생략합니다. EC2 키페어가 없다면 EC2 콘솔로 접속하여 키페어를 생성합니다.\nc. EC2 콘솔 화면의 좌측 메뉴에서 “키 페어”를 클릭하고 “키 페어 생성” 버튼을 클릭합니다.\nd. “키 페어 이름”에 “config-lab-seoul”를 입력한 후, “생성”을 클릭합니다.\ne. 이후 “config-lab-seoul.pem” 파일을 임의의 폴더에 다운로드합니다.\n   CloudFormation 템플릿 실행\na. CloudFormation은 템플릿 파일 (json, yml)에 EC2 인스턴스, 네트워크 구성 등의 클라우드 인프라 리소스를 모델링하고 클라우드 환경에서 프로비저닝할 수 있는 서비스입니다.\nb. CloudFormation 템플릿을 실행하기 위해 링크를 클릭합니다. 링크를 클릭하면 아래와 같은 화면이 표시됩니다.\n  * 템플릿 생성에 사용된 스택 이름, 파라미터, KeyName, SSHLocation 등은 필요에 따라 수정이 가능합니다. 다만, 원활한 진행을 위하여 가급적 기본값을 사용하시기를 권고드립니다.\n정상적으로 진행이 되는 경우 아래와 같이 스택의 상태가 \u0026ldquo;CREATE_COMPLETE)으로 되어 있는 것을 확인하실 수 있습니다. EC2 인스턴스 생성에 사용된 템플릿은 별도의 VPC 와 EIP 등을 추가로 생성하므로 기존에 사용하던 계정에 VPC 나 EIP 의 수가 한계에 도달한 경우 스택 생성이 실패하게 됩니다.\n "
},
{
	"uri": "/config/module2.html",
	"title": "고급 쿼리의 사용",
	"tags": [],
	"description": "",
	"content": " 이번에는 AWS Config 가 활성화된 상태에서 AWS Config 가 제공하는 \u0026ldquo;고급 쿼리\u0026rdquo; 기능을 사용해보도록 하겠습니다.\n고급 쿼리 실행  \u0026ldquo;고급 쿼리\u0026rdquo; 기능을 사용하기 위하여 AWS Config 메뉴에서 \u0026ldquo;고급 쿼리\u0026rdquo; 를 클릭합니다.  \u0026ldquo;고급 쿼리\u0026rdquo; 메뉴에서 새로운 쿼리를 실행하기 위하여 \u0026ldquo;새 쿼리\u0026rdquo; 버튼을 클릭합니다.  새로운 쿼리를 입력하기 위하여 아래의 쿼리를 복사한 후 붙여넣습니다. 붙여넣기가 완료되면 하단의 \u0026ldquo;실행\u0026rdquo; 버튼을 클릭하여 고급 쿼리를 실행합니다.\nSELECT resourceId, resourceName, resourceType, configuration WHERE resourceType = 'AWS::EC2::SecurityGroup'   쿼리가 성공하는 경우 아래와 같이 CloudFormation 을 통하여 생성한 Security Group 이 출력되는 것을 확인할 수 있습니다.   AWS Config 에서 제공하는 \u0026ldquo;고급 쿼리\u0026rdquo; 기능은 간단한 쿼리 구문을 이용하여 단일 계정 혹은 애그리게이터를 통해 생성된 복수 계정 및 복수 리전에 대한 쿼리가 가능하며 사용자 정의 쿼리뿐만 아니라 AWS 관리형 쿼리도 제공하고 있습니다.\n "
},
{
	"uri": "/remediation/module2.html",
	"title": "문제 해결의 사용",
	"tags": [],
	"description": "",
	"content": " \u0026ldquo;문제 해결\u0026rdquo; 등록 AWS Config 규칙에서의 문제 해결 작업은 AWS Systems Manager Automation을 사용하여 실행됩니다. 이전 과정에서 생성한 사용자 정의 Automation 을 AWS Config 규칙의 \u0026ldquo;문제 해결\u0026rdquo; 로 지정하여 사용하도록 하겠습니다.\n \u0026ldquo;문제 해결\u0026rdquo; 을 기존에 사용한 AWS Config 규칙에 등록하기 위하여 아래 화면과 같이 AWS Config 규칙으로 이동한 후 \u0026ldquo;restricted-ssh\u0026rdquo; 를 선택하고 \u0026ldquo;문제 해결 관리\u0026rdquo; 버튼을 클릭합니다.  화면 중앙의 \u0026ldquo;문제 해결 작업\u0026rdquo; 의 메뉴에서 \u0026ldquo;DisablePublicSSH\u0026rdquo; 를 찾아서 선택합니다. \u0026ldquo;자동 수정\u0026rdquo; 옵션은 이 실습에서는 사용하지 않도록 \u0026ldquo;아니요\u0026rdquo;를 선택합니다. 리소스 ID 파라미터는 \u0026ldquo;GroupId\u0026rdquo; 를 선택합니다. 그리고 마지막으로 \u0026ldquo;저장\u0026rdquo; 버튼을 클릭합니다. \u0026ldquo;자동 수정\u0026rdquo; 옵션이 \u0026ldquo;예\u0026rdquo; 로 선택되어 있는 경우 문제 해결 작업이 바로 실행이 되게됩니다. 따라서, 문제 해결 작업이 즉시 실행되어 예기치 않은 상황이 발생할 수 있으므로 실제 운영 환경에서는 등록되는 \u0026ldquo;문제 해결\u0026rdquo; 작업이 정확하게 어떤 기능으로 구현이 되어 있으며 \u0026ldquo;문제 해결\u0026rdquo; 적용 시 어떤 영향이 발생할 수 있는지 정확하게 파악한 후 \u0026ldquo;자동 수정\u0026rdquo; 옵션을 활성화하시기 바랍니다.\n  \u0026ldquo;문제 해결\u0026rdquo; 등록이 정상적으로 완료된 상태에서 \u0026ldquo;문제 해결\u0026rdquo; 적용을 위하여 아래와 같이 \u0026ldquo;restrcited-ssh\u0026rdquo; 규칙에 \u0026ldquo;미준수\u0026rdquo; 상태로 되어 있는 Security Group 을 선택한 후 \u0026ldquo;문제 해결\u0026rdquo; 버튼을 클릭합니다.  정상적으로 \u0026ldquo;문제 해결\u0026rdquo; 이 진행되면 아래와 같이 \u0026ldquo;작업이 성공적으로 실행되었습니다.\u0026rdquo; 라는 메시지를 확인하실 수 있습니다.   문제 해결 작업 결과 확인 조금 전 실행한 AWS Config 규칙의 문제 해결 작업이 실제로 정상적으로 완료되었는지 확인하기 위하여 EC2 메뉴의 Secuirty Group 설정을 확인하도록 하겠습니다.\n 아래와 같이 EC2 Security Group 메뉴로 이동한 후 \u0026ldquo;인바운드 규칙\u0026rdquo; 메뉴를 클릭하여 인바운드 규칙 중 0.0.0.0/0 Port 22 규칙이 제거되어 있는 것을 확인하시기 바랍니다.  AWS Config 규칙에서도 아래와 같이 \u0026ldquo;restricted-ssh\u0026rdquo; 규칙의 상태가 \u0026ldquo;준수\u0026rdquo; 상태인 것을 확인합니다.   \u0026ldquo;문제 해결\u0026rdquo; 작업이 성공적으로 완료되더라도 Config 규칙의 상태가 \u0026ldquo;미준수\u0026rdquo; 에서 \u0026ldquo;준수\u0026rdquo; 로 바뀌는데에는 몇 분의 시간이 소요될 수 있으니 잠시 기다리셨다가 확인하시기 바랍니다.\n "
},
{
	"uri": "/overview/module2.html",
	"title": "사전 준비 사항",
	"tags": [],
	"description": "",
	"content": "본 실습은 다음과 같은 사전 준비사항을 요구합니다.\n AWS 계정 (AWS 에서 제공하는 EventEngine 을 이용하는 경우 생략 가능) Chrome Browser  실습 과정을 원활하게 진행하기 위해서는 크롬 브라우져가 필요하므로 사용하시는 랩탑에 크롬 브라우져를 설치해주시기 바랍니다.\n "
},
{
	"uri": "/config/module3.html",
	"title": "규칙 추가",
	"tags": [],
	"description": "",
	"content": "이번에는 여러분들이 EC2 인스턴스나 ALB 등에 사용하시는 Security Group 의 설정을 감시할 수 있는 AWS Config 규칙을 생성해보도록 하겠습니다. AWS 에서는 여러분들이 자주 사용하시는 규칙을 관리형으로 제공하고 있으며 이렇게 제공되는 관리형 규칙과 함께 여러분들이 직접 작성하신 사용자 지정 규칙도 함께 사용하실 수 있습니다.\n이 과정에서는 편의상 AWS 관리형 규칙을 추가하도록 하겠습니다.\n 새로운 AWS Config 규칙 추가를 위해 AWS Config 메뉴에서 \u0026ldquo;규칙\u0026rdquo; 을 선택한 후 \u0026ldquo;규칙 추가\u0026rdquo; 버튼을 클릭합니다.  \u0026ldquo;규칙 유형 선택\u0026rdquo; 에서 \u0026ldquo;AWS 관리형 규칙 추가\u0026rdquo; 를 선택한 후 \u0026ldquo;ssh\u0026rdquo; 를 검색어로 사용하여 \u0026ldquo;restricted-ssh\u0026rdquo; 규칙을 찾아 선택한 후 \u0026ldquo;다음\u0026rdquo; 버튼을 클릭합니다.  모든 설정값을 기본값으로 둔 후 \u0026ldquo;다음\u0026rdquo; 버튼을 클릭합니다.  검토 및 생성 메뉴를 확인한 후 화면 하단의 \u0026ldquo;규칙 추가\u0026rdquo; 버튼을 클릭합니다.  정상적으로 규칙이 생성되었다면 아래와 같이 생성된 규칙을 확인하실 수 있습니다.   "
},
{
	"uri": "/config.html",
	"title": "AWS Config 를 이용한 규정 준수 확인",
	"tags": [],
	"description": "",
	"content": " 이 과정에서는 AWS Config 를 이용하여 EC2 인스턴스에 할당되어 있는 Security Group 의 설정을 검사하는 방법을 살펴보도록 하겠습니다.  "
},
{
	"uri": "/config/module4.html",
	"title": "규칙 준수 확인",
	"tags": [],
	"description": "",
	"content": "이번에는 Security Group 의 설정을 변경하여 이전 과정에서 생성된 AWS Config 규칙이 변경된 Security Group 의 설정을 잘 감시하는지 확인해보도록 하겠습니다.\n Security Group 의 설정을 변경하기 위해 EC2 메뉴로 이동한 후 아래와 같이 EC2 인스턴스에 할당되어 있는 Security Group 을 선택한 후 \u0026ldquo;인바운드 규칙 편집\u0026rdquo; 버튼을 클릭합니다.  SSH 에 설정되어 있는 1.2.3.4\u0026frasl;32 정책을 \u0026ldquo;삭제\u0026rdquo;버튼을 클릭하여 삭제합니다.  \u0026ldquo;규칙 추가\u0026rdquo; 버튼을 클릭한 후 아래 화면과 같이 SSH 에 대해 \u0026ldquo;위치 무관\u0026rdquo; 하게 접근할 수 있도록 정책을 추가한 후 \u0026ldquo;규칙 저장\u0026rdquo; 버튼을 클릭합니다.  Security Group 에 아래와 같이 SSH 에 대해 Public 접근이 모두 허용되도록 정책이 추가되었습니다.  Security Group 의 설정이 정상적으로 변경되었다면 이제 AWS Config 메뉴로 이동한 후 \u0026ldquo;restricted-ssh\u0026rdquo; 규칙의 상태를 확인하도록 합니다. 아래 화면과 같이 변경된 1개의 Security Group 에 대해 미준수 리소스가 발생된 것을 확인하실 수 있습니다.  \u0026ldquo;restricted-ssh\u0026rdquo; 규칙을 클릭하여 상세 정보를 확인합니다. 아래와 같이 \u0026ldquo;범위 내 리소스\u0026rdquo; 부분에 전체 대상 Security Group 중 하나의 Security Group 이 미준수인 것을 확인하실 수 있습니다.  이번에는 화면 상단의 \u0026ldquo;리소스 타임라인\u0026rdquo; 을 클릭하여 타임라인별 상세 정보를 확인하도록 합니다. \u0026ldquo;리소스 타임라인\u0026rdquo; 클릭 시 별도의 탭이 열리게됩니다.  \u0026ldquo;리소스 타임라인\u0026rdquo; 창에서 제공되는 정보 중 \u0026ldquo;변경 사항\u0026rdquo; 항목을 펼치게 되면 아래와 같이 Secuirty Group 의 설정 변경 사항에 대한 상세 정보를 확인하실 수 있습니다.  이번에는 \u0026ldquo;규칙 준수 타임라인\u0026rdquo; 탭을 클릭하시고 Security Group 의 시간 별 규칙 준수에 대한 상세 정보를 확인하시기 바랍니다.   "
},
{
	"uri": "/remediation.html",
	"title": "문제 해결",
	"tags": [],
	"description": "",
	"content": " AWS Config 에서 제공하는 문제 해결 기능에 대한 실습을 진행합니다. AWS Config 규칙에서 사용하는 \u0026ldquo;문제 해결\u0026rdquo; 기능은 Systems Manager 에서 사용하는 Automation 을 기반으로 동작합니다.  "
},
{
	"uri": "/post.html",
	"title": "마무리",
	"tags": [],
	"description": "",
	"content": "수고하셨습니다!!.\nAWS 에서 제공하는 EventEngine 을 통해 실습을 진행하신 경우 실습에 사용된 자원을 별도로 삭제하지 않으셔도 각 자원은 자동 삭제됩니다.\n  Report an issue   Learn more  "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/authors.html",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "   Timestamp Name Alias Activity     2019.12 Shin Eunsu @eunsshin initial creation   2020.02 Cho Yijeong @yijeong update   2020.03 Cho Yijeong @yijeong update lab based on feedback    Originial content is available at : https://github.com/sessin/awswafhol\n"
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]